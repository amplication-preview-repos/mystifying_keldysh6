/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sponsor as PrismaSponsor } from "@prisma/client";

export class SponsorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SponsorCountArgs, "select">): Promise<number> {
    return this.prisma.sponsor.count(args);
  }

  async sponsors<T extends Prisma.SponsorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SponsorFindManyArgs>
  ): Promise<PrismaSponsor[]> {
    return this.prisma.sponsor.findMany<Prisma.SponsorFindManyArgs>(args);
  }
  async sponsor<T extends Prisma.SponsorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SponsorFindUniqueArgs>
  ): Promise<PrismaSponsor | null> {
    return this.prisma.sponsor.findUnique(args);
  }
  async createSponsor<T extends Prisma.SponsorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SponsorCreateArgs>
  ): Promise<PrismaSponsor> {
    return this.prisma.sponsor.create<T>(args);
  }
  async updateSponsor<T extends Prisma.SponsorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SponsorUpdateArgs>
  ): Promise<PrismaSponsor> {
    return this.prisma.sponsor.update<T>(args);
  }
  async deleteSponsor<T extends Prisma.SponsorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SponsorDeleteArgs>
  ): Promise<PrismaSponsor> {
    return this.prisma.sponsor.delete(args);
  }
}
