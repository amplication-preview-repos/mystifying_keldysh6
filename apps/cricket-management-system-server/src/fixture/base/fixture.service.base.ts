/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fixture as PrismaFixture } from "@prisma/client";

export class FixtureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FixtureCountArgs, "select">): Promise<number> {
    return this.prisma.fixture.count(args);
  }

  async fixtures<T extends Prisma.FixtureFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixtureFindManyArgs>
  ): Promise<PrismaFixture[]> {
    return this.prisma.fixture.findMany<Prisma.FixtureFindManyArgs>(args);
  }
  async fixture<T extends Prisma.FixtureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixtureFindUniqueArgs>
  ): Promise<PrismaFixture | null> {
    return this.prisma.fixture.findUnique(args);
  }
  async createFixture<T extends Prisma.FixtureCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixtureCreateArgs>
  ): Promise<PrismaFixture> {
    return this.prisma.fixture.create<T>(args);
  }
  async updateFixture<T extends Prisma.FixtureUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixtureUpdateArgs>
  ): Promise<PrismaFixture> {
    return this.prisma.fixture.update<T>(args);
  }
  async deleteFixture<T extends Prisma.FixtureDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixtureDeleteArgs>
  ): Promise<PrismaFixture> {
    return this.prisma.fixture.delete(args);
  }
}
