/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FixtureService } from "../fixture.service";
import { FixtureCreateInput } from "./FixtureCreateInput";
import { Fixture } from "./Fixture";
import { FixtureFindManyArgs } from "./FixtureFindManyArgs";
import { FixtureWhereUniqueInput } from "./FixtureWhereUniqueInput";
import { FixtureUpdateInput } from "./FixtureUpdateInput";

export class FixtureControllerBase {
  constructor(protected readonly service: FixtureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fixture })
  async createFixture(
    @common.Body() data: FixtureCreateInput
  ): Promise<Fixture> {
    return await this.service.createFixture({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fixture] })
  @ApiNestedQuery(FixtureFindManyArgs)
  async fixtures(@common.Req() request: Request): Promise<Fixture[]> {
    const args = plainToClass(FixtureFindManyArgs, request.query);
    return this.service.fixtures({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fixture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fixture(
    @common.Param() params: FixtureWhereUniqueInput
  ): Promise<Fixture | null> {
    const result = await this.service.fixture({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fixture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFixture(
    @common.Param() params: FixtureWhereUniqueInput,
    @common.Body() data: FixtureUpdateInput
  ): Promise<Fixture | null> {
    try {
      return await this.service.updateFixture({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fixture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFixture(
    @common.Param() params: FixtureWhereUniqueInput
  ): Promise<Fixture | null> {
    try {
      return await this.service.deleteFixture({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
